{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "env": {
    "BASH_DEFAULT_TIMEOUT_MS": "300000",
    "BASH_MAX_TIMEOUT_MS": "1200000",
    "NODE_OPTIONS": "--max-old-space-size=4096",
    "CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR": "1"
  },
  "permissions": {
    "allow": [
      "Bash(cat:*)",
      "Bash(mkdir:*)",
      "Bash(gh issue view:*)",
      "Bash(gh issue list:*)",
      "Bash(gh pr view:*)",
      "Bash(gh pr list:*)",
      "Bash(gh pr checks:*)",
      "Bash(gh pr checkout:*)",
      "Bash(gh run view:*)",
      "Bash(git add:*)",
      "Bash(git fetch:*)",
      "Bash(git pull:*)",
      "Bash(git push:*)",
      "Bash(git rev-parse:*)",
      "Bash(ls:*)",
      "Bash(pnpm:*)",
      "Bash(npm view:*)",
      "Bash(npm install:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(cat:*)",
      "Bash(grep:*)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:zenn.dev)",
      "WebFetch(domain:liambx.com)",
      "mcp__ide__getDiagnostics",
      "Bash(rg:*)",
      "Bash(gh pr diff:*)",
      "Bash(sed:*)",
      "Bash(git diff:*)",
      "Bash(git switch:*)",
      "Bash(git rebase:*)",
      "Bash(gh search:*)",
      "Bash(jq:*)",
      "Bash(duckdb:*)",
      "Bash(git worktree list:*)",
      "mcp__playwright__browser_*"
    ],
    "deny": [
      "Bash(rm -rf /)",
      "Bash(rm -rf ~)",
      "Bash(rm -rf /*)",
      "Bash(sudo rm:*)",
      "Bash(sudo dd:*)",
      "Bash(sudo mkfs:*)",
      "Bash(sudo fdisk:*)",
      "Bash(sudo mount:*)",
      "Bash(sudo umount:*)",
      "Bash(dd:*)",
      "Bash(mkfs:*)",
      "Bash(fdisk:*)",
      "Bash(> /dev/*)",
      "Bash(>> /dev/*)",
      "Bash(sudo:*passwd*)",
      "Bash(sudo:*shadow*)",
      "Bash(chmod 777 /*)",
      "Bash(chown root:*)",
      "Bash(sudo chmod 777:*)",
      "Bash(sudo chown:*)",
      "Bash(sudo -i:*)",
      "Bash(sudo su:*)",
      "Bash(curl * | sh)",
      "Bash(curl * | bash)",
      "Bash(wget * | sh)",
      "Bash(wget * | bash)",
      "Bash(rm -rf .git)",
      "Bash(git push --force-with-lease origin main)",
      "Bash(git push -f origin main)",
      "Bash(docker system prune -af)",
      "Bash(npm publish:*)",
      "Bash(deno publish:*)",
      "Edit(/etc/**)",
      "Edit(/usr/**)",
      "Edit(/var/**)",
      "Edit(/opt/**)",
      "Edit(/bin/**)",
      "Edit(/sbin/**)",
      "Edit(/lib/**)",
      "Edit(/lib64/**)",
      "Edit(/boot/**)",
      "Edit(/proc/**)",
      "Edit(/sys/**)",
      "Edit(/dev/**)",
      "Edit(~/.ssh/id_*)",
      "Edit(~/.ssh/*_rsa)",
      "Edit(~/.ssh/*_ecdsa)",
      "Edit(~/.ssh/*_ed25519)",
      "Edit(/etc/passwd)",
      "Edit(/etc/shadow)",
      "Edit(/etc/sudoers)",
      "Write(/etc/**)",
      "Write(/usr/**)",
      "Write(/var/**)",
      "Write(/opt/**)",
      "Write(/bin/**)",
      "Write(/sbin/**)",
      "Write(/lib/**)",
      "Write(/lib64/**)",
      "Write(/boot/**)",
      "Write(/proc/**)",
      "Write(/sys/**)",
      "Write(/dev/**)",
      "Write(~/.ssh/id_*)",
      "Write(~/.ssh/*_rsa)",
      "Write(~/.ssh/*_ecdsa)",
      "Write(~/.ssh/*_ed25519)",
      "Write(/etc/passwd)",
      "Write(/etc/shadow)",
      "Write(/etc/sudoers)"
    ],
    "defaultMode": "acceptEdits"
  },
  "model": "sonnet",
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path | select(endswith(\".js\") or endswith(\".ts\") or endswith(\".jsx\") or endswith(\".tsx\"))' | xargs -r npx biome check --write --unsafe"
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '.transcript_path' | xargs cat | jq -r 'select(.type == \"assistant\")' | jq -sr '.[-1].message.content[-1].text' | head -n 2 | nohup say > /dev/null 2>&1 &"
          }
        ]
      }
    ]
  },
  "feedbackSurveyState": {
    "lastShownTime": 1754049856266
  }
}